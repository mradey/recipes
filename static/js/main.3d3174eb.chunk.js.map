{"version":3,"sources":["Recipe.js","MyForm.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","makeList","elements","li","x","push","react_default","a","createElement","className","this","props","name","instructions","ingredients","Component","MyForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleNameChange","evt","setState","target","value","handleDescriptionChange","description","handleIngredientNameChange","idx","newIngredients","state","map","ingredient","sidx","handleInstructionNameChange","newInstructions","instruction","handleSubmit","firebase","ref","child","set","handleAddIngredient","concat","handleAddInstruction","handleRemoveIngredient","filter","s","handleRemoveInstruction","_this2","onSubmit","type","placeholder","onChange","shareholder","onClick","App","createTable","table","i","obj","children","id","handleClick","bind","assertThisInitialized","toggle","itemClicked","itemId","addItemClicked","addItem","speed","on","snap","val","border","MyForm_MyForm","Recipe_Recipe","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d3174eb.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Recipe.css';\r\n\r\nexport default class Recipe extends Component{\r\n  makeList = (elements) => {\r\n      let li = []\r\n      for (var x in elements) {\r\n        li.push(<li>{elements[x]}</li>);\r\n      }\r\n      return li;\r\n    }\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className = \"App\">\r\n        <h1>{this.props.name}</h1>\r\n        <h2>instructions</h2>\r\n        <ol>{this.makeList(this.props.instructions)}</ol>\r\n        <h2>ingredients</h2>\r\n        <ul>{this.makeList(this.props.ingredients)}</ul>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, {Component} from 'react';\r\nimport * as firebase from 'firebase';\r\nimport './form.css';\r\n\r\n\r\nexport default class MyForm extends Component{\r\n  constructor() {\r\n      super();\r\n      this.state = {\r\n        name: \"\",\r\n        description: \"\",\r\n        instructions: [{ name: \"\" }],\r\n        ingredients: [\"\"]\r\n      };\r\n    }\r\n\r\n    handleNameChange = evt => {\r\n      this.setState({ name: evt.target.value });\r\n    };\r\n\r\n    handleDescriptionChange = evt => {\r\n      this.setState({ description: evt.target.value });\r\n    };\r\n\r\n    handleIngredientNameChange = idx => evt => {\r\n      const newIngredients = this.state.ingredients.map((ingredient, sidx) => {\r\n        if (idx !== sidx) return ingredient;\r\n        return evt.target.value;\r\n      });\r\n\r\n      this.setState({ ingredients: newIngredients });\r\n    };\r\n\r\n    handleInstructionNameChange = idx => evt => {\r\n      const newInstructions = this.state.instructions.map((instruction, sidx) => {\r\n        if (idx !== sidx) return instruction;\r\n        return evt.target.value;\r\n      });\r\n\r\n      this.setState({ instructions: newInstructions });\r\n    };\r\n\r\n    handleSubmit = evt => {\r\n      const db = firebase.database().ref();\r\n      const recipesref = db.child('recipes');\r\n      recipesref.push().set(this.state);\r\n    }\r\n\r\n    handleAddIngredient = () => {\r\n      this.setState({\r\n        ingredients: this.state.ingredients.concat([\"\"])\r\n      });\r\n    };\r\n\r\n    handleAddInstruction = () => {\r\n      this.setState({\r\n        instructions: this.state.instructions.concat([\"\"])\r\n      });\r\n    };\r\n\r\n    handleRemoveIngredient = idx => () => {\r\n      this.setState({\r\n        ingredients: this.state.ingredients.filter((s, sidx) => idx !== sidx)\r\n      });\r\n    };\r\n\r\n    handleRemoveInstruction = idx => () => {\r\n      this.setState({\r\n        instructions: this.state.instructions.filter((s, sidx) => idx !== sidx)\r\n      });\r\n    };\r\n    render() {\r\n      return (\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Recipe Name\"\r\n            value={this.state.name}\r\n            onChange={this.handleNameChange}\r\n          />\r\n\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Description\"\r\n            value={this.state.description}\r\n            onChange={this.handleDescriptionChange}\r\n          />\r\n          <h1>Instructions</h1>\r\n          {this.state.instructions.map((shareholder, idx) => (\r\n            <div className=\"shareholder\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder={`Instruction #${idx + 1}`}\r\n                value={shareholder.name}\r\n                onChange={this.handleInstructionNameChange(idx)}\r\n              />\r\n              <button\r\n                type=\"button\"\r\n                onClick={this.handleRemoveInstruction(idx, 1)}\r\n                className=\"small\"\r\n              >\r\n                -\r\n              </button>\r\n            </div>\r\n          ))}\r\n          <button\r\n            type=\"button\"\r\n            onClick={this.handleAddInstruction}\r\n            className=\"small\"\r\n          >\r\n            Add Instruction\r\n          </button>\r\n          <h1>Ingredients</h1>\r\n\r\n          {this.state.ingredients.map((shareholder, idx) => (\r\n            <div className=\"shareholder\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder={`Ingredient #${idx + 1}`}\r\n                value={shareholder.name}\r\n                onChange={this.handleIngredientNameChange(idx)}\r\n              />\r\n              <button\r\n                type=\"button\"\r\n                onClick={this.handleRemoveIngredient(idx)}\r\n                className=\"small\"\r\n              >\r\n                -\r\n              </button>\r\n            </div>\r\n          ))}\r\n          <button\r\n            type=\"button\"\r\n            onClick={this.handleAddIngredient}\r\n            className=\"small\"\r\n          >\r\n            Add Ingredient\r\n          </button>\r\n          <button>Add this recipe</button>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\nimport * as firebase from 'firebase';\nimport './App.css';\nimport Recipe from \"./Recipe\";\nimport MyForm from \"./MyForm\";\n\nclass App extends Component{\n  constructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tspeed: 10,\n      obj: {},\n      itemClicked: false,\n      itemId: \"\",\n      instructions: \"\",\n      ingredients: \"\",\n      addItemClicked: false\n\t\t};\n\t}\n  componentDidMount(){\n    const rootRef = firebase.database().ref().child('recipes');\n    rootRef.on('value', snap => {\n        this.setState({\n          obj: snap.val()\n        })\n    });\n  }\n  handleClick(i){\n    this.setState({\n      itemClicked: true,\n      itemId: i,\n      name: this.state.obj[i][\"name\"],\n      instructions: this.state.obj[i][\"instructions\"],\n      ingredients: this.state.obj[i][\"ingredients\"],\n    });\n  }\n  createTable = () => {\n      let table = []\n      table.push(<tr><th>name</th><th>description</th></tr>)\n      var i = 0;\n      // Outer loop to create parent\n      for (var x in this.state.obj) {\n\n        let children = []\n        children.push(<td>{this.state.obj[x].name}</td>)\n        children.push(<td>{this.state.obj[x].description}</td>)\n        //Create the parent and add the children\n        table.push(<tr id={i} onClick={this.handleClick.bind(this,x)}>{children}</tr>)\n        i=i+1;\n      }\n      return table\n    }\n  toggle = () => {\n    this.setState({\n      itemClicked: false,\n      itemId: \"\",\n      instructions: \"\",\n      ingredients: \"\",\n      addItemClicked: false\n    });\n  }\n  addItem = () => {\n    this.setState({\n      addItemClicked: true\n    });\n  }\n\trender(){\n\t\treturn(\n\t\t\t<div className = \"App\">\n\t\t\t\t{!this.state.itemClicked && !this.state.addItemClicked &&\n          <div>\n            <table border=\"1\" id=\"recipes\">{this.createTable()}</table>\n            <button onClick={this.addItem}>Add a recipe</button>\n          </div>}\n        {this.state.addItemClicked &&\n          <div>\n            <MyForm />\n            <button onClick={this.toggle} >Return to recipe list</button>\n          </div>\n        }\n        {this.state.itemClicked &&\n          <div>\n            <Recipe name={this.state.name} instructions={this.state.instructions} ingredients={this.state.ingredients} />\n            <button onClick={this.toggle} >Return to recipe list</button>\n          </div>\n        }\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase';\n\nvar config = {\n    apiKey: \"AIzaSyBhPP7BRSi-ZZVMcxMYKA6HXwUCGhMyztE\",\n    authDomain: \"recipes-8897a.firebaseapp.com\",\n    databaseURL: \"https://recipes-8897a.firebaseio.com\",\n    projectId: \"recipes-8897a\",\n    storageBucket: \"recipes-8897a.appspot.com\",\n    //messagingSenderId: \"489439680572\",\n    //appId: \"1:489439680572:web:eb454e87c51eb6f4\"\n  };\nfirebase.initializeApp(config);\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}