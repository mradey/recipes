{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","makeList","elements","li","x","push","react_default","a","createElement","className","this","props","name","instructions","ingredients","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","createTable","table","i","state","obj","children","id","onClick","handleClick","bind","assertThisInitialized","toggle","setState","itemClicked","itemId","speed","_this2","firebase","ref","on","snap","val","border","Recipe_Recipe","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAGqBA,oNACnBC,SAAW,SAACC,GACR,IAAIC,EAAK,GACT,IAAK,IAAIC,KAAKF,EACZC,EAAGE,KAAKC,EAAAC,EAAAC,cAAA,UAAKN,EAASE,KAExB,OAAOD,2EAGX,OACCG,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACZH,EAAAC,EAAAC,cAAA,UAAKE,KAAKC,MAAMC,MAChBN,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,UAAKE,KAAKT,SAASS,KAAKC,MAAME,eAC9BP,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UAAKE,KAAKT,SAASS,KAAKC,MAAMG,sBAfFC,cCqErBC,cAnEb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAR,KAAAM,IACbC,EAAAC,OAAAE,EAAA,EAAAF,CAAAR,KAAAQ,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAZ,QA2BAa,YAAc,WACV,IAAIC,EAAQ,GACZA,EAAMnB,KAAKC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,kBAAaF,EAAAC,EAAAC,cAAA,2BAC5B,IAAIiB,EAAI,EAER,IAAK,IAAIrB,KAAKa,EAAKS,MAAMC,IAAK,CAE5B,IAAIC,EAAW,GACfA,EAASvB,KAAKC,EAAAC,EAAAC,cAAA,UAAKJ,IACnBwB,EAASvB,KAAKC,EAAAC,EAAAC,cAAA,UAAKS,EAAKS,MAAMC,IAAIvB,GAAf,cAEnBoB,EAAMnB,KAAKC,EAAAC,EAAAC,cAAA,MAAIqB,GAAIJ,EAAGK,QAASb,EAAKc,YAAYC,KAAjBd,OAAAe,EAAA,EAAAf,CAAAD,GAA2Bb,IAAKwB,IAC/DH,GAAI,EAEN,OAAOD,GA1CEP,EA4CbiB,OAAS,WACPjB,EAAKkB,SAAS,CACZC,aAAa,EACbC,OAAQ,GACRxB,aAAc,GACdC,YAAa,MA/CjBG,EAAKS,MAAQ,CACZY,MAAO,GACJX,IAAK,GACLS,aAAa,EACbC,OAAQ,GACRxB,aAAc,GACdC,YAAa,IARJG,mFAWM,IAAAsB,EAAA7B,KACD8B,aAAoBC,MAC5BC,GAAG,QAAS,SAAAC,GAChBJ,EAAKJ,SAAS,CACZR,IAAKgB,EAAKC,8CAKNnB,GACVf,KAAKyB,SAAS,CACZC,aAAa,EACbC,OAAQZ,EACRZ,aAAcH,KAAKgB,MAAMC,IAAIF,GAAf,aACdX,YAAaJ,KAAKgB,MAAMC,IAAIF,GAAf,+CA4BjB,OACCnB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,QACdC,KAAKgB,MAAMU,aAAe9B,EAAAC,EAAAC,cAAA,SAAOqC,OAAO,KAAKnC,KAAKa,eAC/Cb,KAAKgB,MAAMU,aACV9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsC,EAAD,CAAQlC,KAAMF,KAAKgB,MAAMW,OAAQxB,aAAcH,KAAKgB,MAAMb,aAAcC,YAAaJ,KAAKgB,MAAMZ,cAChGR,EAAAC,EAAAC,cAAA,UAAQsB,QAASpB,KAAKwB,QAAtB,kCA5DMnB,aCQEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCFNX,gBATa,CACTY,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,8BAKnBC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SDgH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d7aaf2c0.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\n\r\nexport default class Recipe extends Component{\r\n  makeList = (elements) => {\r\n      let li = []\r\n      for (var x in elements) {\r\n        li.push(<li>{elements[x]}</li>);\r\n      }\r\n      return li;\r\n    }\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className = \"App\">\r\n        <h1>{this.props.name}</h1>\r\n        <h2>instructions</h2>\r\n        <ol>{this.makeList(this.props.instructions)}</ol>\r\n        <h2>ingredients</h2>\r\n        <ul>{this.makeList(this.props.ingredients)}</ul>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, {Component} from 'react';\nimport * as firebase from 'firebase';\nimport './App.css';\nimport Recipe from \"./Recipe\";\nclass App extends Component{\n  constructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tspeed: 10,\n      obj: {},\n      itemClicked: false,\n      itemId: \"\",\n      instructions: \"\",\n      ingredients: \"\"\n\t\t};\n\t}\n  componentDidMount(){\n    const rootRef = firebase.database().ref();\n    rootRef.on('value', snap => {\n        this.setState({\n          obj: snap.val()\n        })\n    });\n  }\n\n  handleClick(i){\n    this.setState({\n      itemClicked: true,\n      itemId: i,\n      instructions: this.state.obj[i][\"instructions\"],\n      ingredients: this.state.obj[i][\"ingredients\"],\n    });\n  }\n  createTable = () => {\n      let table = []\n      table.push(<tr><td>name</td><td>description</td></tr>)\n      var i = 0;\n      // Outer loop to create parent\n      for (var x in this.state.obj) {\n\n        let children = []\n        children.push(<td>{x}</td>)\n        children.push(<td>{this.state.obj[x][\"description\"]}</td>)\n        //Create the parent and add the children\n        table.push(<tr id={i} onClick={this.handleClick.bind(this,x)}>{children}</tr>)\n        i=i+1;\n      }\n      return table\n    }\n  toggle = () => {\n    this.setState({\n      itemClicked: false,\n      itemId: \"\",\n      instructions: \"\",\n      ingredients: \"\"\n    });\n  }\n\trender(){\n\t\treturn(\n\t\t\t<div className = \"App\">\n\t\t\t\t{!this.state.itemClicked && <table border=\"1\">{this.createTable()}</table>}\n        {this.state.itemClicked &&\n          <div>\n            <Recipe name={this.state.itemId} instructions={this.state.instructions} ingredients={this.state.ingredients} />\n            <button onClick={this.toggle} >Return to recipe list</button>\n          </div>\n        }\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase';\n\nvar config = {\n    apiKey: \"AIzaSyBhPP7BRSi-ZZVMcxMYKA6HXwUCGhMyztE\",\n    authDomain: \"recipes-8897a.firebaseapp.com\",\n    databaseURL: \"https://recipes-8897a.firebaseio.com\",\n    projectId: \"recipes-8897a\",\n    storageBucket: \"recipes-8897a.appspot.com\",\n    //messagingSenderId: \"489439680572\",\n    //appId: \"1:489439680572:web:eb454e87c51eb6f4\"\n  };\nfirebase.initializeApp(config);\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}